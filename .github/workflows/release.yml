name: Release

permissions:
  contents: write
  pull-requests: read

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Base version (e.g., 1.0.0, 1.1.0)'
        required: true
        type: string
        default: '1.0.0'
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - alpha
          - beta
          - rc
          - release

jobs:
  build-executables:
    name: Build executables
    runs-on: ubuntu-latest
    outputs:
      build_version: ${{ steps.vars.outputs.build_version }}
      build_number: ${{ steps.vars.outputs.build_number }}
      tag_name: ${{ steps.vars.outputs.tag_name }}
      release_name: ${{ steps.vars.outputs.release_name }}
      base_version: ${{ steps.vars.outputs.base_version }}
      is_prerelease: ${{ steps.vars.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Declare build output variables
        id: vars
        shell: bash
        run: |
          # Get build number from total commits
          build_number=$(git rev-list --count HEAD)
          
          # Get base version from input
          base_version="${{ github.event.inputs.version }}"
          
          # Ensure base_version has at least major.minor format
          if [[ -z "$base_version" ]]; then
            base_version="1.0.0"
          fi
          
          # Extract major.minor from base version (e.g., 1.0.0 -> 1.0)
          major_minor="${base_version%.*}"
          if [[ "$major_minor" == "$base_version" ]]; then
            # If no patch version found, assume it's already major.minor
            major_minor="$base_version"
          fi
          
          # Create version with build number as patch: v1.0.2331
          full_version="v${major_minor}.${build_number}"
          
          # Use build number tags for all releases
          tag_name="${full_version}"
          
          # Create release name based on release type
          if [ "${{ github.event.inputs.release_type }}" = "release" ]; then
            release_name="v${major_minor}.${build_number}"
            is_prerelease="false"
          else
            release_name="${{ github.event.inputs.release_type == 'alpha' && 'Alpha' || github.event.inputs.release_type == 'beta' && 'Beta' || 'RC' }} v${major_minor}.${build_number}"
            is_prerelease="true"
          fi
          
          echo "build_version=${full_version}" >> $GITHUB_OUTPUT
          echo "build_number=${build_number}" >> $GITHUB_OUTPUT
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}" >> $GITHUB_OUTPUT
          echo "base_version=${base_version}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${is_prerelease}" >> $GITHUB_OUTPUT
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Update package.json version
        run: |
          npm version ${{ steps.vars.outputs.build_version }} --no-git-tag-version
        
      - name: Build project
        env:
          PAWNCTL_VERSION: ${{ steps.vars.outputs.build_version }}
          PAWNCTL_BUILD_NUMBER: ${{ steps.vars.outputs.build_number }}
        run: npm run build
        
      - name: Build executables
        run: npm run build:executable
        
      - name: Upload executables
        uses: actions/upload-artifact@v4
        with:
          name: executables
          path: binaries/

  build-installer:
    name: Build Windows installer
    runs-on: windows-latest
    needs: build-executables
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        env:
          PAWNCTL_VERSION: ${{ needs.build-executables.outputs.build_version }}
          PAWNCTL_BUILD_NUMBER: ${{ needs.build-executables.outputs.build_number }}
        run: npm run build
        
      - name: Build executables
        run: npm run build:executable
        
      - name: Build installer
        run: |
          # Build Windows installer using Inno Setup with dynamic version
          & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" installer/pawnctl-setup.iss /DMyAppVersion="${{ needs.build-executables.outputs.tag_name }}" /DMyAppVersionInfo="${{ needs.build-executables.outputs.build_version }}"
        
      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: installer
          path: dist-installer/

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [build-executables, build-installer]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: executables
          path: binaries/
          
      - name: Download installer
        uses: actions/download-artifact@v4
        with:
          name: installer
          path: dist-installer/
        
      - name: Find installer file
        id: find_installer
        run: |
          installer_file=$(find ./dist-installer -name "*.exe" | head -1)
          if [ -z "$installer_file" ]; then
            echo "❌ No installer file found in dist-installer/"
            exit 1
          fi
          echo "installer_file=$installer_file" >> $GITHUB_OUTPUT
          echo "✅ Found installer: $installer_file"
        
      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ needs.build-executables.outputs.tag_name }}" \
            --title "${{ needs.build-executables.outputs.release_name }}" \
            --notes "### Downloads
          
          **Windows:**
          - \`pawnctl-setup-${{ needs.build-executables.outputs.build_version }}.exe\` - Full installer (recommended)
          - \`pawnctl-win.exe\` - Standalone executable
          
          **Linux/macOS:**
          - \`pawnctl-linux\` - Linux binary  
          - \`pawnctl-macos\` - macOS binary
          - Run: \`chmod +x pawnctl-*\`
          
          ${{ needs.build-executables.outputs.is_prerelease == 'true' && '### ⚠️ Pre-release
          This is a pre-release for testing and feedback.' || '### ✅ Stable Release
          This is an official stable release.' }}
          
          **Issues:** https://github.com/${{ github.repository }}/issues" \
            ${{ needs.build-executables.outputs.is_prerelease == 'true' && '--prerelease' || '' }} \
            "${{ steps.find_installer.outputs.installer_file }}#pawnctl-setup-${{ needs.build-executables.outputs.build_version }}.exe" \
            "./binaries/pawnctl-win.exe" \
            "./binaries/pawnctl-linux" \
            "./binaries/pawnctl-macos"