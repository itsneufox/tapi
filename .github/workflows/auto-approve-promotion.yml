name: Auto Approve Promotion

on:
  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  pull-requests: write
  contents: write

jobs:
  approve:
    if: >
      github.event.pull_request.head.repo.full_name == github.repository &&
      github.event.pull_request.head.ref == 'promotion/nightly' &&
      github.event.pull_request.base.ref == 'production'
    runs-on: ubuntu-latest

    steps:
      - name: Generate promotion app token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.PROMOTION_APP_ID }}
          private-key: ${{ secrets.PROMOTION_APP_PRIVATE_KEY }}
          owner: itsneufox
          repositories: tapi

      - name: Approve promotion pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pull_number = context.payload.pull_request.number;

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number,
            });

            const alreadyApproved = reviews.some(
              (review) =>
                review.user?.login === "github-actions[bot]" &&
                review.state === "APPROVED"
            );

            if (alreadyApproved) {
              core.info(`Promotion PR #${pull_number} already approved.`);
            } else {
              await github.rest.pulls.createReview({
                owner,
                repo,
                pull_number,
                event: "APPROVE",
                body: "Automated approval for nightly promotion.",
              });
              core.info(`Approved promotion PR #${pull_number}.`);
            }

      - name: Attempt auto merge
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const core = require("@actions/core");
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pull_number = context.payload.pull_request.number;

            const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

            let pr;
            for (let attempt = 0; attempt < 5; attempt += 1) {
              ({ data: pr } = await github.rest.pulls.get({
                owner,
                repo,
                pull_number,
              }));

              if (pr.mergeable_state && pr.mergeable_state !== "unknown") {
                break;
              }

              core.info(`mergeable_state is '${pr.mergeable_state}'. Waiting before retry (${attempt + 1}/5).`);
              await sleep(5000);
            }

            if (pr.mergeable_state !== "clean") {
              core.info(
                `Promotion PR #${pull_number} not ready to merge (mergeable_state=${pr.mergeable_state}).`
              );
              return;
            }

            try {
              await github.rest.pulls.merge({
                owner,
                repo,
                pull_number,
                merge_method: "merge",
              });
            } catch (error) {
              if (error.response) {
                core.error(`Merge failed with status ${error.status}`);
                core.error(JSON.stringify(error.response.data, null, 2));
              }
              throw error;
            }

            core.info(`Merged promotion PR #${pull_number}.`)
